// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

namespace Demo.DAL
{
    public partial class QPAbstractItem: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPAbstractItem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPAbstractItem,  IQPFormService, string>>
        {
			{ "Title", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "Parent_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
			{ "IsVisible", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsVisible != null ? self.IsVisible.Value ? "1" : "0" : null) },
			{ "IsPage", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsPage != null ? self.IsPage.Value ? "1" : "0" : null) },
			{ "ZoneName", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ZoneName != null ? ctx.ReplacePlaceholders(self.ZoneName) : null) },
			{ "AllowedUrlPatterns", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.AllowedUrlPatterns != null ? ctx.ReplacePlaceholders(self.AllowedUrlPatterns) : null) },
			{ "DeniedUrlPatterns", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.DeniedUrlPatterns != null ? ctx.ReplacePlaceholders(self.DeniedUrlPatterns) : null) },
			{ "Description", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "Discriminator_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Discriminator_ID != null ? self.Discriminator_ID.ToString() : null) },
			{ "VersionOf_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.VersionOf_ID != null ? self.VersionOf_ID.ToString() : null) },
			{ "Culture_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Culture_ID != null ? self.Culture_ID.ToString() : null) },
			{ "TitleFormat_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "Keywords", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Keywords != null ? ctx.ReplacePlaceholders(self.Keywords) : null) },
			{ "MetaDescription", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? ctx.ReplacePlaceholders(self.MetaDescription) : null) },
			{ "Tags", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Tags != null ? ctx.ReplacePlaceholders(self.Tags) : null) },
			{ "IsInSiteMap", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsInSiteMap != null ? self.IsInSiteMap.Value ? "1" : "0" : null) },
			{ "IndexOrder", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IndexOrder != null ? self.IndexOrder.ToString() : null) },
			{ "ExtensionId", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ExtensionId != null ? self.ExtensionId.ToString() : null) },
			{ "ContentId", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ContentId != null ? self.ContentId.ToString() : null) },
        };

        #endregion
        #region Genarated properties
        public Boolean IsVisibleExact { get { return this.IsVisible == null ? default(Boolean) : this.IsVisible.Value; } }
        public Boolean IsPageExact { get { return this.IsPage == null ? default(Boolean) : this.IsPage.Value; } }
        public Boolean IsInSiteMapExact { get { return this.IsInSiteMap == null ? default(Boolean) : this.IsInSiteMap.Value; } }
        public Int32 IndexOrderExact { get { return this.IndexOrder == null ? default(Int32) : this.IndexOrder.Value; } }
        public Int32 ExtensionIdExact { get { return this.ExtensionId == null ? default(Int32) : this.ExtensionId.Value; } }
        public Int32 ContentIdExact { get { return this.ContentId == null ? default(Int32) : this.ContentId.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.ZoneName = context.ReplacePlaceholders(this.ZoneName);
			this.AllowedUrlPatterns = context.ReplacePlaceholders(this.AllowedUrlPatterns);
			this.DeniedUrlPatterns = context.ReplacePlaceholders(this.DeniedUrlPatterns);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.Keywords = context.ReplacePlaceholders(this.Keywords);
			this.MetaDescription = context.ReplacePlaceholders(this.MetaDescription);
			this.Tags = context.ReplacePlaceholders(this.Tags);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPAbstractItem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QPDiscriminator: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPDiscriminator, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPDiscriminator,  IQPFormService, string>>
        {
			{ "Title", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "PreferredContentId", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.PreferredContentId != null ? self.PreferredContentId.ToString() : null) },
			{ "CategoryName", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.CategoryName != null ? ctx.ReplacePlaceholders(self.CategoryName) : null) },
			{ "Description", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "IconUrl", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.IconUrl != null ? self.IconUrl : null) },
			{ "IsPage", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.IsPage != null ? self.IsPage.Value ? "1" : "0" : null) },
			{ "AllowedZones", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.AllowedZones != null ? ctx.ReplacePlaceholders(self.AllowedZones) : null) },
			{ "FilterPartByUrl", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.FilterPartByUrl != null ? self.FilterPartByUrl.Value ? "1" : "0" : null) },
        };

        #endregion
        #region Genarated properties
        public string IconUrlUrl { get; set; }
        public string IconUrlUploadPath { get; set; }
        public Int32 PreferredContentIdExact { get { return this.PreferredContentId == null ? default(Int32) : this.PreferredContentId.Value; } }
        public Boolean IsPageExact { get { return this.IsPage == null ? default(Boolean) : this.IsPage.Value; } }
        public Boolean FilterPartByUrlExact { get { return this.FilterPartByUrl == null ? default(Boolean) : this.FilterPartByUrl.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.CategoryName = context.ReplacePlaceholders(this.CategoryName);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.AllowedZones = context.ReplacePlaceholders(this.AllowedZones);
			this.IconUrlUrl = context.GetUrl(this.IconUrl, "QPDiscriminator", "IconUrl");
			this.IconUrlUploadPath = context.GetUploadPath(this.IconUrl, "QPDiscriminator", "IconUrl");
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPDiscriminator", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class MarketingRegion: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<MarketingRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MarketingRegion,  IQPFormService, string>>
        {
			{ "Parent_ID", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
			{ "Title", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Url", new Func<MarketingRegion, IQPFormService, string>((self, ctx) => self.Url != null ? ctx.ReplacePlaceholders(self.Url) : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Url = context.ReplacePlaceholders(this.Url);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MarketingRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QPCulture: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPCulture, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPCulture,  IQPFormService, string>>
        {
			{ "Title", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "Icon", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
        };

        #endregion
        #region Genarated properties
        public string IconUrl { get; set; }
        public string IconUploadPath { get; set; }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.IconUrl = context.GetUrl(this.Icon, "QPCulture", "Icon");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "QPCulture", "Icon");
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPCulture", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class ItemTitleFormat: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<ItemTitleFormat, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<ItemTitleFormat,  IQPFormService, string>>
        {
			{ "Value", new Func<ItemTitleFormat, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
			{ "Description", new Func<ItemTitleFormat, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Value = context.ReplacePlaceholders(this.Value);
			this.Description = context.ReplacePlaceholders(this.Description);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("ItemTitleFormat", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QPRegion: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPRegion, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPRegion,  IQPFormService, string>>
        {
			{ "ParentId", new Func<QPRegion, IQPFormService, string>((self, ctx) => self.ParentId != null ? self.ParentId.ToString() : null) },
			{ "Title", new Func<QPRegion, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<QPRegion, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
        };

        #endregion
        #region Genarated properties
        public Int32 ParentIdExact { get { return this.ParentId == null ? default(Int32) : this.ParentId.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPRegion", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class TrailedAbstractItem: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<TrailedAbstractItem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<TrailedAbstractItem,  IQPFormService, string>>
        {
			{ "Trail", new Func<TrailedAbstractItem, IQPFormService, string>((self, ctx) => self.Trail != null ? ctx.ReplacePlaceholders(self.Trail) : null) },
			{ "Title", new Func<TrailedAbstractItem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<TrailedAbstractItem, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Trail = context.ReplacePlaceholders(this.Trail);
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("TrailedAbstractItem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class SiteSetting: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<SiteSetting, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<SiteSetting,  IQPFormService, string>>
        {
			{ "SettingKey", new Func<SiteSetting, IQPFormService, string>((self, ctx) => self.SettingKey != null ? ctx.ReplacePlaceholders(self.SettingKey) : null) },
			{ "SettingType", new Func<SiteSetting, IQPFormService, string>((self, ctx) => self.SettingType != null ? ctx.ReplacePlaceholders(self.SettingType) : null) },
			{ "SettingValue", new Func<SiteSetting, IQPFormService, string>((self, ctx) => self.SettingValue != null ? ctx.ReplacePlaceholders(self.SettingValue) : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.SettingKey = context.ReplacePlaceholders(this.SettingKey);
			this.SettingType = context.ReplacePlaceholders(this.SettingType);
			this.SettingValue = context.ReplacePlaceholders(this.SettingValue);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("SiteSetting", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QpRegionTag: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QpRegionTag, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QpRegionTag,  IQPFormService, string>>
        {
			{ "Key", new Func<QpRegionTag, IQPFormService, string>((self, ctx) => self.Key != null ? ctx.ReplacePlaceholders(self.Key) : null) },
			{ "Value", new Func<QpRegionTag, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Key = context.ReplacePlaceholders(this.Key);
			this.Value = context.ReplacePlaceholders(this.Value);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QpRegionTag", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QpRegionTagValue: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QpRegionTagValue, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QpRegionTagValue,  IQPFormService, string>>
        {
			{ "Parent_ID", new Func<QpRegionTagValue, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
			{ "Value", new Func<QpRegionTagValue, IQPFormService, string>((self, ctx) => self.Value != null ? ctx.ReplacePlaceholders(self.Value) : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Value = context.ReplacePlaceholders(this.Value);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QpRegionTagValue", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QPItemDefinitionConstraint: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPItemDefinitionConstraint, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPItemDefinitionConstraint,  IQPFormService, string>>
        {
			{ "Target_ID", new Func<QPItemDefinitionConstraint, IQPFormService, string>((self, ctx) => self.Target_ID != null ? self.Target_ID.ToString() : null) },
			{ "Source_ID", new Func<QPItemDefinitionConstraint, IQPFormService, string>((self, ctx) => self.Source_ID != null ? self.Source_ID.ToString() : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPItemDefinitionConstraint", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class News: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<News, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<News,  IQPFormService, string>>
        {
			{ "Title", new Func<News, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "TitleForDetails", new Func<News, IQPFormService, string>((self, ctx) => self.TitleForDetails != null ? ctx.ReplacePlaceholders(self.TitleForDetails) : null) },
			{ "TransliterationTitle", new Func<News, IQPFormService, string>((self, ctx) => self.TransliterationTitle != null ? ctx.ReplacePlaceholders(self.TransliterationTitle) : null) },
			{ "PublishDate", new Func<News, IQPFormService, string>((self, ctx) => self.PublishDate != null ? self.PublishDate.ToString() : null) },
			{ "Anounce", new Func<News, IQPFormService, string>((self, ctx) => self.Anounce != null ? ctx.ReplacePlaceholders(self.Anounce) : null) },
			{ "Text", new Func<News, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Order", new Func<News, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "MainImage", new Func<News, IQPFormService, string>((self, ctx) => self.MainImage != null ? self.MainImage : null) },
			{ "PublishSMI_ID", new Func<News, IQPFormService, string>((self, ctx) => self.PublishSMI_ID != null ? self.PublishSMI_ID.ToString() : null) },
			{ "Keywords", new Func<News, IQPFormService, string>((self, ctx) => self.Keywords != null ? ctx.ReplacePlaceholders(self.Keywords) : null) },
			{ "MetaDescription", new Func<News, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? ctx.ReplacePlaceholders(self.MetaDescription) : null) },
			{ "Alias", new Func<News, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "TitleFormat_ID", new Func<News, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
			{ "SmallImage", new Func<News, IQPFormService, string>((self, ctx) => self.SmallImage != null ? self.SmallImage : null) },
        };

        #endregion
        #region Genarated properties
        public string MainImageUrl { get; set; }
        public string SmallImageUrl { get; set; }
        public string MainImageUploadPath { get; set; }
        public string SmallImageUploadPath { get; set; }
        public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.TitleForDetails = context.ReplacePlaceholders(this.TitleForDetails);
			this.TransliterationTitle = context.ReplacePlaceholders(this.TransliterationTitle);
			this.Anounce = context.ReplacePlaceholders(this.Anounce);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.Keywords = context.ReplacePlaceholders(this.Keywords);
			this.MetaDescription = context.ReplacePlaceholders(this.MetaDescription);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.MainImageUrl = context.GetUrl(this.MainImage, "News", "MainImage");
			this.SmallImageUrl = context.GetUrl(this.SmallImage, "News", "SmallImage");
			this.MainImageUploadPath = context.GetUploadPath(this.MainImage, "News", "MainImage");
			this.SmallImageUploadPath = context.GetUploadPath(this.SmallImage, "News", "SmallImage");
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("News", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class NewsGroup: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<NewsGroup, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<NewsGroup,  IQPFormService, string>>
        {
			{ "Title", new Func<NewsGroup, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("NewsGroup", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QpSMI: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QpSMI, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QpSMI,  IQPFormService, string>>
        {
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QpSMI", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QpNewsRubric: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QpNewsRubric, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QpNewsRubric,  IQPFormService, string>>
        {
			{ "Title", new Func<QpNewsRubric, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "RubricId", new Func<QpNewsRubric, IQPFormService, string>((self, ctx) => self.RubricId != null ? self.RubricId.ToString() : null) },
			{ "Order", new Func<QpNewsRubric, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Alias", new Func<QpNewsRubric, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
        };

        #endregion
        #region Genarated properties
        public Int32 RubricIdExact { get { return this.RubricId == null ? default(Int32) : this.RubricId.Value; } }
        public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QpNewsRubric", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class PopularServicesValue: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<PopularServicesValue, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<PopularServicesValue,  IQPFormService, string>>
        {
			{ "Order", new Func<PopularServicesValue, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "Text", new Func<PopularServicesValue, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Url", new Func<PopularServicesValue, IQPFormService, string>((self, ctx) => self.Url != null ? ctx.ReplacePlaceholders(self.Url) : null) },
        };

        #endregion
        #region Genarated properties
        public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Text = context.ReplacePlaceholders(this.Text);
			this.Url = context.ReplacePlaceholders(this.Url);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("PopularServicesValue", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class MainSectionsValue: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<MainSectionsValue, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<MainSectionsValue,  IQPFormService, string>>
        {
			{ "Title", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Order", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.Order != null ? self.Order.ToString() : null) },
			{ "LT1Text", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.LT1Text != null ? ctx.ReplacePlaceholders(self.LT1Text) : null) },
			{ "LT1URL", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.LT1URL != null ? ctx.ReplacePlaceholders(self.LT1URL) : null) },
			{ "LB2Text", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.LB2Text != null ? ctx.ReplacePlaceholders(self.LB2Text) : null) },
			{ "LB2URL", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.LB2URL != null ? ctx.ReplacePlaceholders(self.LB2URL) : null) },
			{ "RT3Text", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.RT3Text != null ? ctx.ReplacePlaceholders(self.RT3Text) : null) },
			{ "RT3URL", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.RT3URL != null ? ctx.ReplacePlaceholders(self.RT3URL) : null) },
			{ "RB4Text", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.RB4Text != null ? ctx.ReplacePlaceholders(self.RB4Text) : null) },
			{ "RB4URL", new Func<MainSectionsValue, IQPFormService, string>((self, ctx) => self.RB4URL != null ? ctx.ReplacePlaceholders(self.RB4URL) : null) },
        };

        #endregion
        #region Genarated properties
        public Int32 OrderExact { get { return this.Order == null ? default(Int32) : this.Order.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.LT1Text = context.ReplacePlaceholders(this.LT1Text);
			this.LT1URL = context.ReplacePlaceholders(this.LT1URL);
			this.LB2Text = context.ReplacePlaceholders(this.LB2Text);
			this.LB2URL = context.ReplacePlaceholders(this.LB2URL);
			this.RT3Text = context.ReplacePlaceholders(this.RT3Text);
			this.RT3URL = context.ReplacePlaceholders(this.RT3URL);
			this.RB4Text = context.ReplacePlaceholders(this.RB4Text);
			this.RB4URL = context.ReplacePlaceholders(this.RB4URL);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("MainSectionsValue", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QpAction: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QpAction, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QpAction,  IQPFormService, string>>
        {
			{ "Title", new Func<QpAction, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Alias", new Func<QpAction, IQPFormService, string>((self, ctx) => self.Alias != null ? ctx.ReplacePlaceholders(self.Alias) : null) },
			{ "Description", new Func<QpAction, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "Text", new Func<QpAction, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "ShowUntil", new Func<QpAction, IQPFormService, string>((self, ctx) => self.ShowUntil != null ? self.ShowUntil.ToString() : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Alias = context.ReplacePlaceholders(this.Alias);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.Text = context.ReplacePlaceholders(this.Text);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QpAction", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QpBlog: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QpBlog, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QpBlog,  IQPFormService, string>>
        {
			{ "PostTitle", new Func<QpBlog, IQPFormService, string>((self, ctx) => self.PostTitle != null ? ctx.ReplacePlaceholders(self.PostTitle) : null) },
			{ "PostDescription", new Func<QpBlog, IQPFormService, string>((self, ctx) => self.PostDescription != null ? ctx.ReplacePlaceholders(self.PostDescription) : null) },
			{ "PostText", new Func<QpBlog, IQPFormService, string>((self, ctx) => self.PostText != null ? ctx.ReplacePlaceholders(self.PostText) : null) },
			{ "PostImgDescription", new Func<QpBlog, IQPFormService, string>((self, ctx) => self.PostImgDescription != null ? ctx.ReplacePlaceholders(self.PostImgDescription) : null) },
			{ "PostImage", new Func<QpBlog, IQPFormService, string>((self, ctx) => self.PostImage != null ? self.PostImage : null) },
        };

        #endregion
        #region Genarated properties
        public string PostImageUrl { get; set; }
        public string PostImageUploadPath { get; set; }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.PostTitle = context.ReplacePlaceholders(this.PostTitle);
			this.PostDescription = context.ReplacePlaceholders(this.PostDescription);
			this.PostText = context.ReplacePlaceholders(this.PostText);
			this.PostImgDescription = context.ReplacePlaceholders(this.PostImgDescription);
			this.PostImageUrl = context.GetUrl(this.PostImage, "QpBlog", "PostImage");
			this.PostImageUploadPath = context.GetUploadPath(this.PostImage, "QpBlog", "PostImage");
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QpBlog", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
}
