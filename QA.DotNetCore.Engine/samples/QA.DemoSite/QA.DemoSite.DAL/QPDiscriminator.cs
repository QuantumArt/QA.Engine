// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using Quantumart.QP8.EntityFrameworkCore;
namespace QA.DemoSite.DAL
{
    public partial class QPDiscriminator: IQPArticle
    {
        public QPDiscriminator()
        {
		    AllowedItemDefinitions = new HashSet<QPItemDefinitionConstraint>();
		    Items = new HashSet<QPAbstractItem>();
		    AllowDefinition = new HashSet<QPItemDefinitionConstraint>();
		    AllowedItemDefinitions1 = new HashSet<QPDiscriminator2QPDiscriminatorForAllowedItemDefinitions1>();
			BackwardForAllowedItemDefinitions1 = new HashSet<QPDiscriminator2QPDiscriminatorForBackwardForAllowedItemDefinitions1>();
        }

        public virtual Int32 Id { get; set; }
        public virtual Int32 StatusTypeId { get; set; }
        public virtual bool Visible { get; set; }
        public virtual bool Archive { get; set; }
        public virtual DateTime Created { get; set; }
        public virtual DateTime Modified { get; set; }
        public virtual Int32 LastModifiedBy { get; set; }
        public virtual StatusType StatusType { get; set; }

		private String _Title;
		public virtual String Title 
		{ 
			get { return _Title; }
			set { _Title = QpDataContext.Current.ReplacePlaceholders(value);}
		}
		private String _Name;
		public virtual String Name 
		{ 
			get { return _Name; }
			set { _Name = QpDataContext.Current.ReplacePlaceholders(value);}
		}
        public virtual Int32? PreferredContentId { get; set; }
		private String _TypeName;
		public virtual String TypeName 
		{ 
			get { return _TypeName; }
			set { _TypeName = QpDataContext.Current.ReplacePlaceholders(value);}
		}
		private String _CategoryName;
		public virtual String CategoryName 
		{ 
			get { return _CategoryName; }
			set { _CategoryName = QpDataContext.Current.ReplacePlaceholders(value);}
		}
		private String _Description;
		public virtual String Description 
		{ 
			get { return _Description; }
			set { _Description = QpDataContext.Current.ReplacePlaceholders(value);}
		}
        public virtual String IconUrl { get; set; }
        public virtual Boolean? IsPage { get; set; }
		private String _AllowedZones;
		public virtual String AllowedZones 
		{ 
			get { return _AllowedZones; }
			set { _AllowedZones = QpDataContext.Current.ReplacePlaceholders(value);}
		}
        public virtual Boolean? FilterPartByUrl { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public  ICollection<QPItemDefinitionConstraint> AllowedItemDefinitions { get; set; }
		/// <summary>
		/// Auto-generated backing property for field (id: 27516)/Discriminator Items
		/// </summary>
		public  ICollection<QPAbstractItem> Items { get; set; }
		/// <summary>
		/// Auto-generated backing property for field (id: 47908)/Target AllowDefinition
		/// </summary>
		public  ICollection<QPItemDefinitionConstraint> AllowDefinition { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public  ICollection<QPDiscriminator2QPDiscriminatorForAllowedItemDefinitions1> AllowedItemDefinitions1 { get; set; }
		/// <summary>
		/// Auto-generated backing property for 27552/AllowedItemDefinitions1
		/// </summary>
		public  ICollection<QPDiscriminator2QPDiscriminatorForBackwardForAllowedItemDefinitions1> BackwardForAllowedItemDefinitions1 { get; set; }
	}
}
	
