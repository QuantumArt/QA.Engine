// Code generated by a template
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

namespace QA.DemoSite.DAL
{
    public partial class QPAbstractItem: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPAbstractItem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPAbstractItem,  IQPFormService, string>>
        {
			{ "Title", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "Parent_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Parent_ID != null ? self.Parent_ID.ToString() : null) },
			{ "IsVisible", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsVisible != null ? self.IsVisible.Value ? "1" : "0" : null) },
			{ "IsPage", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsPage != null ? self.IsPage.Value ? "1" : "0" : null) },
			{ "ZoneName", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ZoneName != null ? ctx.ReplacePlaceholders(self.ZoneName) : null) },
			{ "AllowedUrlPatterns", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.AllowedUrlPatterns != null ? ctx.ReplacePlaceholders(self.AllowedUrlPatterns) : null) },
			{ "DeniedUrlPatterns", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.DeniedUrlPatterns != null ? ctx.ReplacePlaceholders(self.DeniedUrlPatterns) : null) },
			{ "Description", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "Discriminator_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Discriminator_ID != null ? self.Discriminator_ID.ToString() : null) },
			{ "VersionOf_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.VersionOf_ID != null ? self.VersionOf_ID.ToString() : null) },
			{ "Culture_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Culture_ID != null ? self.Culture_ID.ToString() : null) },
			{ "Keywords", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Keywords != null ? ctx.ReplacePlaceholders(self.Keywords) : null) },
			{ "MetaDescription", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.MetaDescription != null ? ctx.ReplacePlaceholders(self.MetaDescription) : null) },
			{ "Tags", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.Tags != null ? ctx.ReplacePlaceholders(self.Tags) : null) },
			{ "IsInSiteMap", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IsInSiteMap != null ? self.IsInSiteMap.Value ? "1" : "0" : null) },
			{ "IndexOrder", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.IndexOrder != null ? self.IndexOrder.ToString() : null) },
			{ "ExtensionId", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ExtensionId != null ? self.ExtensionId.ToString() : null) },
			{ "ContentId", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.ContentId != null ? self.ContentId.ToString() : null) },
			{ "TitleFormat_ID", new Func<QPAbstractItem, IQPFormService, string>((self, ctx) => self.TitleFormat_ID != null ? self.TitleFormat_ID.ToString() : null) },
        };

        #endregion
        #region Genarated properties
        public Boolean IsVisibleExact { get { return this.IsVisible == null ? default(Boolean) : this.IsVisible.Value; } }
        public Boolean IsPageExact { get { return this.IsPage == null ? default(Boolean) : this.IsPage.Value; } }
        public Boolean IsInSiteMapExact { get { return this.IsInSiteMap == null ? default(Boolean) : this.IsInSiteMap.Value; } }
        public Int32 IndexOrderExact { get { return this.IndexOrder == null ? default(Int32) : this.IndexOrder.Value; } }
        public Int32 ExtensionIdExact { get { return this.ExtensionId == null ? default(Int32) : this.ExtensionId.Value; } }
        public Int32 ContentIdExact { get { return this.ContentId == null ? default(Int32) : this.ContentId.Value; } }
        public Int32 TitleFormat_IDExact { get { return this.TitleFormat_ID == null ? default(Int32) : this.TitleFormat_ID.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.ZoneName = context.ReplacePlaceholders(this.ZoneName);
			this.AllowedUrlPatterns = context.ReplacePlaceholders(this.AllowedUrlPatterns);
			this.DeniedUrlPatterns = context.ReplacePlaceholders(this.DeniedUrlPatterns);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.Keywords = context.ReplacePlaceholders(this.Keywords);
			this.MetaDescription = context.ReplacePlaceholders(this.MetaDescription);
			this.Tags = context.ReplacePlaceholders(this.Tags);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPAbstractItem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QPDiscriminator: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPDiscriminator, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPDiscriminator,  IQPFormService, string>>
        {
			{ "Title", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "PreferredContentId", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.PreferredContentId != null ? self.PreferredContentId.ToString() : null) },
			{ "TypeName", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.TypeName != null ? ctx.ReplacePlaceholders(self.TypeName) : null) },
			{ "CategoryName", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.CategoryName != null ? ctx.ReplacePlaceholders(self.CategoryName) : null) },
			{ "Description", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.Description != null ? ctx.ReplacePlaceholders(self.Description) : null) },
			{ "IconUrl", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.IconUrl != null ? self.IconUrl : null) },
			{ "IsPage", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.IsPage != null ? self.IsPage.Value ? "1" : "0" : null) },
			{ "AllowedZones", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.AllowedZones != null ? ctx.ReplacePlaceholders(self.AllowedZones) : null) },
			{ "FilterPartByUrl", new Func<QPDiscriminator, IQPFormService, string>((self, ctx) => self.FilterPartByUrl != null ? self.FilterPartByUrl.Value ? "1" : "0" : null) },
        };

        #endregion
        #region Genarated properties
        public string IconUrlUrl { get; set; }
        public string IconUrlUploadPath { get; set; }
        public Int32 PreferredContentIdExact { get { return this.PreferredContentId == null ? default(Int32) : this.PreferredContentId.Value; } }
        public Boolean IsPageExact { get { return this.IsPage == null ? default(Boolean) : this.IsPage.Value; } }
        public Boolean FilterPartByUrlExact { get { return this.FilterPartByUrl == null ? default(Boolean) : this.FilterPartByUrl.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.TypeName = context.ReplacePlaceholders(this.TypeName);
			this.CategoryName = context.ReplacePlaceholders(this.CategoryName);
			this.Description = context.ReplacePlaceholders(this.Description);
			this.AllowedZones = context.ReplacePlaceholders(this.AllowedZones);
			this.IconUrlUrl = context.GetUrl(this.IconUrl, "QPDiscriminator", "IconUrl");
			this.IconUrlUploadPath = context.GetUploadPath(this.IconUrl, "QPDiscriminator", "IconUrl");
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPDiscriminator", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QPCulture: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPCulture, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPCulture,  IQPFormService, string>>
        {
			{ "Title", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Name", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Name != null ? ctx.ReplacePlaceholders(self.Name) : null) },
			{ "Icon", new Func<QPCulture, IQPFormService, string>((self, ctx) => self.Icon != null ? self.Icon : null) },
        };

        #endregion
        #region Genarated properties
        public string IconUrl { get; set; }
        public string IconUploadPath { get; set; }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Name = context.ReplacePlaceholders(this.Name);
			this.IconUrl = context.GetUrl(this.Icon, "QPCulture", "Icon");
			this.IconUploadPath = context.GetUploadPath(this.Icon, "QPCulture", "Icon");
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPCulture", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class QPItemDefinitionConstraint: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<QPItemDefinitionConstraint, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<QPItemDefinitionConstraint,  IQPFormService, string>>
        {
			{ "Target_ID", new Func<QPItemDefinitionConstraint, IQPFormService, string>((self, ctx) => self.Target_ID != null ? self.Target_ID.ToString() : null) },
			{ "Source_ID", new Func<QPItemDefinitionConstraint, IQPFormService, string>((self, ctx) => self.Source_ID != null ? self.Source_ID.ToString() : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("QPItemDefinitionConstraint", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class BlogPost: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<BlogPost, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<BlogPost,  IQPFormService, string>>
        {
			{ "Title", new Func<BlogPost, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "Brief", new Func<BlogPost, IQPFormService, string>((self, ctx) => self.Brief != null ? ctx.ReplacePlaceholders(self.Brief) : null) },
			{ "PostDate", new Func<BlogPost, IQPFormService, string>((self, ctx) => self.PostDate != null ? self.PostDate.ToString() : null) },
			{ "Category_ID", new Func<BlogPost, IQPFormService, string>((self, ctx) => self.Category_ID != null ? self.Category_ID.ToString() : null) },
			{ "Text", new Func<BlogPost, IQPFormService, string>((self, ctx) => self.Text != null ? ctx.ReplacePlaceholders(self.Text) : null) },
			{ "Image", new Func<BlogPost, IQPFormService, string>((self, ctx) => self.Image != null ? self.Image : null) },
			{ "YoutubeVideoCode", new Func<BlogPost, IQPFormService, string>((self, ctx) => self.YoutubeVideoCode != null ? ctx.ReplacePlaceholders(self.YoutubeVideoCode) : null) },
        };

        #endregion
        #region Genarated properties
        public string ImageUrl { get; set; }
        public string ImageUploadPath { get; set; }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
			this.Brief = context.ReplacePlaceholders(this.Brief);
			this.Text = context.ReplacePlaceholders(this.Text);
			this.YoutubeVideoCode = context.ReplacePlaceholders(this.YoutubeVideoCode);
			this.ImageUrl = context.GetUrl(this.Image, "BlogPost", "Image");
			this.ImageUploadPath = context.GetUploadPath(this.Image, "BlogPost", "Image");
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("BlogPost", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class BlogCategory: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<BlogCategory, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<BlogCategory,  IQPFormService, string>>
        {
			{ "Title", new Func<BlogCategory, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
			{ "SortOrder", new Func<BlogCategory, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
        };

        #endregion
        #region Genarated properties
        public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("BlogCategory", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class BlogTag: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<BlogTag, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<BlogTag,  IQPFormService, string>>
        {
			{ "Title", new Func<BlogTag, IQPFormService, string>((self, ctx) => self.Title != null ? ctx.ReplacePlaceholders(self.Title) : null) },
        };

        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Title = context.ReplacePlaceholders(this.Title);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("BlogTag", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
    public partial class FaqItem: IQPArticle
    {
        #region Static members
        protected static readonly Dictionary<string, Func<FaqItem, IQPFormService, string>> _valueExtractors = new Dictionary<string, Func<FaqItem,  IQPFormService, string>>
        {
			{ "Question", new Func<FaqItem, IQPFormService, string>((self, ctx) => self.Question != null ? ctx.ReplacePlaceholders(self.Question) : null) },
			{ "Answer", new Func<FaqItem, IQPFormService, string>((self, ctx) => self.Answer != null ? ctx.ReplacePlaceholders(self.Answer) : null) },
			{ "SortOrder", new Func<FaqItem, IQPFormService, string>((self, ctx) => self.SortOrder != null ? self.SortOrder.ToString() : null) },
        };

        #endregion
        #region Genarated properties
        public Int32 SortOrderExact { get { return this.SortOrder == null ? default(Int32) : this.SortOrder.Value; } }
        #endregion
        #region Methods
        void IQPArticle.OnMaterialized(IQPLibraryService context)
        {
			this.Question = context.ReplacePlaceholders(this.Question);
			this.Answer = context.ReplacePlaceholders(this.Answer);
        }

        // для Poco перенести из класса куда-нибудь, так как нарушается концепция доступа к БД
        Hashtable IQPArticle.Pack(IQPFormService context, params string[] propertyNames)
        {
            Hashtable table;

            if (propertyNames == null || propertyNames.Length == 0)
            {
                // todo: filter null values
                table = new Hashtable(_valueExtractors.ToDictionary(x => context.GetFormNameByNetNames("FaqItem", x.Key), y => y.Value(this, context)));
            }
            else
            {
                table = new Hashtable();
                foreach (var prop in propertyNames.Join(_valueExtractors.Keys, x => x, x => x, (x, y) => x))
                {
                    string value = _valueExtractors[prop](this, context);
                    table.Add(prop, value);
                }
            }

            return table;
        }
        #endregion
    }
}
